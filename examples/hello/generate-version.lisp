#+xcvb (module (:depends-on ("specials")))

(in-package :xcvb-hello)

(asdf-call :find-system :xcvb)

(defparameter *xcvb-path*
  (ensure-directory-pathname
   (or (xcvb-driver:pathname-mapping "/xcvb")
       #+asdf2 (asdf:system-source-directory :xcvb))))

(defparameter *hello-version-path*
  (or (xcvb-driver:pathname-mapping "/xcvb/hello/version")
      #+asdf2 (asdf-call :system-relative-pathname :xcvb "examples/hello/version.lisp")))

(eval-when (:compile-toplevel :load-toplevel :execute)
  (unless (find-package :xcvb)
    (make-package :xcvb :use '(:cl))))

(load *xcvb-version-path*)
(with-open-file (s *hello-version-path* :direction :output
                   :if-exists :rename-and-delete :if-does-not-exist :create)
  (format s ";;; automatically generated by /xcvb/hello/generate-version~%~
             (in-package :xcvb-hello)~%(setf *version* ~S)~%"
          (first
           (run-program/read-output-lines
            (format nil "cd ~A ; git describe --tags" (get-xcvb-directory))))))
