XCVB
An eXtensible Component Verifier and Builder for lisp

The goal of this project is to have a scalable system to build large
software in Lisp, featuring deterministic separate compilation and
enforced locally-declared dependencies.

For an overview of our benefits, rationale, and design - see the
xcvb.text document.


FILES

pkgdcl.lisp: This file creates the xcvb package and exports the
necessary symbols


xcvb.lisp:

This file contains the bulk of the code to read the module forms from
the top of the source files and construct the dependency graph.  The
main entry point into this file is through the functions
create-dependency-graph and create-dump-image-graph.  Both of these
take a pathspec for the source file whose dependency graph is being
created.  They will read the module form from the top of the source
file, and create a module object to represent it.  Then a
lisp-image-node will be created to represent a lisp image with the
fasl for the given source-file loaded.  The lisp-image-node will have
one compile-dependency: the fasl-node for the given source file. It
then uses the function create-dependency-node to create nodes of the
proper type for all of that file's dependencies.  The function
create-dependency-node destructures the dependency list from the
module for the file and uses the generic function
create-dependency-node-from-type to create a dependency-graph-node of
the proper type for each of the node's dependencies.  This process
will repeat recursively until the whole dependency graph is created.
If you add a new type of dependency-graph-node, it is important to
create a new method on create-dependency-node-from-type so that there
is a way to specify that type of dependency in a module declaration.


extensions.lisp:

This file contains the defextension macro and a couple of pre-defined
extensions.  The defextension macro defines a function and specifies a
keyword that can be used to specify that function in the extension
forms part of a module declaration.  The extension functions from a
module form are applied write after the module form has been parsed
into a module object.


utilities.lisp:

Just a collection of utility functions I found useful.


asdf-extensions.lisp: 

This file adds a function in the asdf package to determine whether or
not an asdf system needs to be re-compiled.


traverse.lisp:

This file contains a the function traverse, which is
just a wrapper around the large collection of methods on the generic
function traverse-helper.  This provides a couple of different ways of
topologically sorting the dependency graph.


compiler-options.lisp:

A collection of global variables that are used by
makefile-generator.lisp to specify what compiler to use and what
options to provide it in the makefile that is being generated.


makefile-generator.lisp:

This file contains the code to take a dependency graph and write a
Makefile that can be used by make to compile the system specified by
the graph. The entry point to this file should be the write-makefile
function.  This function takes the path to a lisp source file, and
will construct a dependency graph for that file, then write a makefile
in the directory specifed by output-path that will be able to compile
the system.  The generated makefile starts by using the specified lisp
executable (as specified in compiler-options.lisp) to dump an image
with xcvb loaded, along with any other files/systems that are
specified in the build-requires slot of the module for the BUILD.lisp
file that is associated with the source file whose dependency graph is
being written to the makefile.


asd-generator.lisp

This file contains the code to take a dependency graph and write an
asd file that can be used by asdf to compile the system specified by
the graph.  The entry point for this file should be the write-asd-file
function.  The generated asd file will have one asdf module to load
all the files/systems in the build-requires slot of the global
build-module, and another module - which depends on the first module -
for all the other files/systems.


asdf-converter.lisp

This file contains the code to take an asdf system and write a
BUILD.lisp file for it and add module forms to the top of all the
source files in the system, so that xcvb can now be used to compile
the system.  The entry point to this file is the function
convert-asdf-system-to-xcvb.  This should only ever be used on a
non-serial asd file whose :components have been generated by
asdf-dependency-grovel.



Good places to extend functionality to xcvb:

1) The generic function create-dependency-node-from-type allows you to
specify a keyword that can be put in a dependency list in a module
form.  The create-dependency-node-from-type method with an eql
specifier on that keyword should create the appropriate
dependency-graph-node.

2) The defextension macro allows you to define a function that can be
called via a keyword in the appropriate place in a module declaration.


NOTES:

1) Throughout the source code there are comments that say ";NUN".
These are intended to document the use of non-portable unix
namestrings.  In other words, I rely on certain functionality of how
pathnames and namestrings work, which may not work on all systems.
The most notable of these is relying on the namestring of a pathname
to use "/" instead of "\" to separate directories.  Most of the use of
NUN's is with regards to fullnames.

2) A fullname is used as a unique name to specify a component in the
system.  Both module's and node's have fullnames - usually a node will
have the same fullname as the module it was generated from (modulo a
different file extension).


TODO:

1) Replace all error throwing with a call to simply-error, using a
condition defined specifically for that error.

2) Allow a module to depend on the cfasl of a file if it is available,
or the fasl of the file if there are no cfasls.  There is already a
cfasl-or-fasl-node for this purpose - but the actual functionality
hasn't been implemented yet.

3) Allow a module to depend on a data-file.  That file will not be
compiled or loaded into the lisp image, but will just be used for
tracking when the file that depends on it needs to be recompiled.

4) Allow the build-requires slot to work with multiple BUILD.lisp
files.  Right now, only the top-most BUILD.lisp file's build-requires
slot is properly handled, the rest are ignored.  To add this
functionality, the makefile-generator will need to write a makefile
that dumps multiple intermediate cores - one for each BUILD.lisp's
build-requires slot (if present) - and also has multiple ${CWBRLRUN}
macros so that compilation will happen with the correct core at each
step of the way.  The asd-generator will similarly need to be changed
to have one asdf module for each BUILD.lisp's build-requires slot (if
present).

5) Provide support for xcvb to be able to handle compiling and loading
a system into the given lisp image (instead of relying on generated
Makefiles or asd file).  Once this is done, don't forget to make the
load-into-xcvb extension work so that users can easily extend xcvb
itself.

6) Document in an example how to use asdf-dependency-grovel and XCVB
together to migrate an existing system from ASDF to XCVB.
