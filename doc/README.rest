.. ; -*- mode:rst; -*-

===================================================================
XCVB - an eXtensible Component Verifier and Builder for Common Lisp
===================================================================

The goal of this project is to have a scalable system
to build large software in Common Lisp,
featuring deterministic separate compilation and
enforced locally-declared dependencies.


.. Contents::
..
    1  About XCVB
      1.1  Status
      1.2  Home page
      1.3  Dependencies
      1.4  Documentation
      1.5  Timeline
      1.6  Alternative
    2  Using XCVB
      2.1  Building XCVB
      2.2  Starting a new XCVB project
      2.3  Converting your ASDF system
      2.4  Compiling with XCVB
    3  Restrictions on your Lisp Code
      3.1  Compile-time side-effects
      3.2  Optimization settings
    4  Combining Multiple Projects
      4.1  Module Full Names
      4.2  Search Path
      4.3  Module Name Resolution
    5  Current Limitations


About XCVB
==========

Status
------

Bottom line:
XCVB isn't yet ready as a full replacement for ASDF for the Lisp masses,
but is already available as such for the adventurous.

The current version (in git master branch)
can handle the usual cases
though it is neither feature-rich nor user-friendly.

You can either write your project directly as an XCVB build
or automatically convert an existing ASDF project
(no ASDF extension supported yet).
XCVB will then help you create a ``Makefile``
for your project, whereby it can be compiled
in a way that enforces declared dependencies.
You may even compile in parallel with ``make -j``
which on a SMP machine may be faster than ASDF.

XCVB builds can depend on other builds and/or on ASDF systems.
ASDF systems can be superseded by migrated XCVB builds when available,
for better dependency management.

Hopefully a version 1.0 will be released this summer
that can seriously replace ASDF and provide a migration path.


Home page
---------

The home page of the project is at:

	http://common-lisp.net/project/xcvb/

You can checkout our public repository with::

	git clone http://common-lisp.net/project/xcvb/git/xcvb.git

Or if you are a project member, you can obtain write access using::

	git clone ssh://USER@common-lisp.net/project/xcvb/public_html/git/xcvb.git

You can also browse the repository at either of these:

	http://common-lisp.net/gitweb?p=projects/xcvb/xcvb.git;a=summary

	http://github.com/fare/xcvb/tree/master


Dependencies
------------

You will need the following pieces of software to get XCVB running:

  * a Lisp implementation. We test with SBCL:
	- homepage: http://sbcl.sourceforge.net/
	- CLiki page: http://cliki.net/SBCL
        - get it from: http://sbcl.sourceforge.net/platform-table.html

  * If you want CFASL, you may need to recompile SBCL from source with this patch, until it has been merged upstream:
	- homepage: http://repo.or.cz/w/sbcl/jsnell.git?a=treediff;h=refs/heads/cfasl;hp=refs/heads/master;hb=cfasl;hpb=master
        - getting it:
		``wget http://repo.or.cz/w/sbcl/jsnell.git?a=treediff_plain;h=refs/heads/cfasl;hp=refs/heads/master;hb=cfasl;hpb=master``

  * cl-launch 2.16 or later:
	- homepage: http://cliki.net/CL-Launch
	- getting it:
		``git clone http://common-lisp.net/project/xcvb/git/cl-launch.git``
        - getting it, if you're a project member::
        	``git clone ssh://USER@common-lisp.net/project/xcvb/public_html/git/cl-launch.git``

  * asdf-dependency-grovel 1.0 with our local modifications:
	- homepage: http://cliki.net/asdf-dependency-grovel
	- getting it:
		``git clone http://common-lisp.net/project/xcvb/git/asdf-dependency-grovel.git``
        - getting it, if you're a project member:
		``git clone ssh://USER@common-lisp.net/project/xcvb/public_html/git/asdf-dependency-grovel.git``

  * Closer to MOP:
	- homepage: http://common-lisp.net/project/closer/closer-mop.html
	- getting it:
		``darcs get http://www.common-lisp.net/project/closer/darcs/closer-mop``


Documentation
-------------

``doc/README.rest``
	The present file describes how to currently use XCVB.

``doc/xcvb.rest`` ``doc/ilc09-xcvb.rest`` ``doc/ilc09-xcvb-slides.rest``
	These files should provide with an overview of the project,
	its intended benefits, rationale and general design.

``doc/ilc09-xcvb-paper.tex`` ``doc/xcvb.bib`` ``doc/sigplanconf.cls``
	These source files compile to a PDF for the demonstration
        that was presented at ILC'2009 for XCVB.

``doc/INTERNALS.rest``
	This file is an introduction to the internals of XCVB
        for hackers interested in debugging or extending it.

``doc/TODO.rest``
	The many prioritized TO DO items on our plate to improve XCVB.
        Some already implemented items should be moved to current documentation.

``doc/configure.mk.example``
	example file to copy into ``configure.mk`` (in the main XCVB directory) and edit,
	so as to be able to create the ``xcvb`` executable.

``doc/exscribe-migration.lisp.example``
	example file you can run (see on top of it) to migrate exscribe
	from ASDF to XCVB. Somewhat out of date. TODO: update it.

``test/mock/a/c/Makefile``
	example for how to integrate XCVB in your Makefile.


Timeline
--------

The original idea for what became XCVB came from
discussions with James Knight at ITA Software in 2007.

XCVB was originally written by Spencer Brody under the supervision of
Francois-Rene Rideau from late May to mid August 2008.
The result was a working prototype,
but requiring some layer of manual hacks
specific to the target on which XCVB was run
(an internal project at ITA Software).

Francois-Rene Rideau restarted work on it
and released an initial semi-usable prototype
in mid December 2008, where the above hacks were automated away.
A paper about the prototype was presented at ILC'09.
The prototype can be retrieved in a git branch::

	git pull http://common-lisp.net/project/xcvb/git/xcvb.git v0.1-prototype:v0.1-prototype
	git checkout v0.1-prototype

Francois-Rene Rideau then undertook a complete rewrite of XCVB
to make its architecture more general,
building on the lessons of the prototype,
recycling good ideas and focusing on issues previously raised.
A semi-usable product was published in May 2009.
We hope to have a complete release with example and documentation
ready for general use by the end of June 2009.

Then will be time to extend and refine the existing functionality,
refactor the internals,
stabilize the API,
implement more features,
document the system, etc.

Subscribe to one of our mailing-lists
if you're interested in learning about our progress
or in influencing our design.


Alternative
-----------

Until XCVB is ready for general use,
you may want to use ASDF-DEPENDENCY-GROVEL and POIU
to achieve some of the same benefits with existing technology,
where dependency analysis or build time are important.

Another interesting alternative to ASDF is mudballs.


Using XCVB
==========

You may want to checkout the latest XCVB from git.
We'll tag stable releases when there are some.


Building XCVB
-------------

Install the dependencies as listed above, then
create and edit your own ``configure.mk`` from ``doc/configure.mk.example``
and finally ``make``.


Starting a new XCVB project
---------------------------

The general principle is that every Lisp file starts with a form like::

       #+xcvb (module (:depends-on ("packages" "macros" "specials" "foo")))

That form specifies all the dependencies of the Lisp file
and nothing but its dependencies.
Optionally, you can distinguish
between ``:compile-depends-on``
and ``:load-depends-on``.

Finally, a main file called ``BUILD.lisp``
is the main file that needs to be loaded in the final image.
It is typically empty except for the module form specifying
all its dependencies
and possibly some finalization forms to run at the end of the build.
The dependencies typically include ASDF libraries,
currently specified in an ugly way as dependencies of the build image.
The ``BUILD.lisp`` file for Exscribe is as follows::

	#+xcvb
        (module
          (:fullname "fare.tunes.org/exscribe"
           :build-requires ((:asdf "cl-launch") (:asdf "fare-utils")
                            (:asdf "fare-matcher") (:asdf "scribble")
                            (:asdf "cl-typesetting"))
           :depends-on ("exscribe" "exscribe-html" "exscribe-txt" "exscribe-typeset")
           :build-image t))

You don't need to specify all your files in the ``BUILD.lisp`` module form,
only those containing the functions you really care about,
since the dependencies will be automatically identified and loaded.


Converting your ASDF system
---------------------------

A simple example that used to to work with our ``v0.1-prototype`` is in
	``doc/exscribe-migration.lisp.example``.

We are otherwise still working to make conversion easier.


Compiling with XCVB
-------------------

To compile, you currently need to use ``xcvb`` as part of a larger ``Makefile``
that will invoke ``xcvb`` and include its output.
See the example in ``test/mock/a/c/Makefile``.

Notably, you typically need a setup file that amongst other things
may load ASDF (if it's not already loaded by your implementation),
customize the ``asdf:*central-registry*``
and otherwise ``proclaim`` your desired default optimization settings.

Note how the above example leverages the ``cl-launch`` configuration
already relied upon while configuring ``xcvb`` itself.

The setup file is specified in argument ``--setup`` to ``xcvb make-makefile``.
It must be the name of a Lisp module following usual XCVB naming conventions,
e.g. ``/foo/setup`` for file ``setup.lisp``
under a BUILD the fullname of which is ``/foo``.


Restrictions on your Lisp Code
==============================

Compile-time side-effects
-------------------------

When someone uses the CFASL option
only CFASLs of dependencies are (by default) loaded at compile-time,
and any defun, defvar or other side-effect used by a macro
must be effected at the ``:compile-toplevel``.

Moreover, when the CFASL option isn't used,
then FASLs of dependencies are loaded at compile-time,
and the same side-effects need to be available at ``:load-toplevel``.

Therefore, any ``defun``, ``defvar`` or other side-effect used by a macro
needs be be enclosed in an ``(eval-when (:compile-toplevel :load-toplevel :execute) ...)``.
(Actually the ``:execute`` is not necessary in code you write manually,
but you probably want to include it in any macro that generates an ``eval-when``).

Note that CFASLs are only available for SBCL at the moment,
but there are plans for Clozure CL to support it if and when XCVB takes off.

You can force the use of a FASL instead of a CFASL by explicitly specifying
a ``:compile-depends-on (... (:fasl "foo") ...)``
instead of the ``:compile-depends-on (... (:compile "foo") ...)``
implicit in saying ``:depends-on (... "foo" ...)``
which would when CFASLs are enable be transformed into a ``... (:cfasl "foo") ...``.
However currently nothing is made to prevent both the FASL and CFASL to be loaded,
in any order implicit in the transitive dependencies of a module,
which can cause interesting surprises if any compile-time side effects
are not idempotent.


Optimization settings
---------------------

Amongst compile-time side-effects, a notable one is the optimization settings.
A default may to be set in your initial Lisp image setup,
as explained in section _`Compiling with XCVB`.
Modules that want to change from the default specified for the whole compilation
should explicitly ``declaim`` it.
You may define some macro that does that for you,
that you will call at the beginning of relevant files.
A module may change the default for subsequent modules that explicitly depend on them
by using a ``(eval-when (:compile-toplevel :load-toplevel) (proclaim ...))``.
Unless of course overridden by a further explicitly depended-upon module
that uses the same trick.



Combining Multiple Projects
===========================

Module Full Names
-----------------

XCVB relies on a global namespace for developers to name modules.
Using this namespace allows programmers to name modules independently
from their specific location on any particular machine's filesystem.

Thus each hierarchy of XCVB files contains a top-level ``BUILD.lisp`` file.
This file contains a module declaration with a ``:fullname`` initializer
that specifies a prefix name for all modules in the hierarchy.
E.g. if your directory ``/foo/bar/`` has a file ``BUILD.lisp``
containing the specification ``:fullname "lisp.example.com/quux"``
then all files under this file hierarchy will be considered as being under
the hierarchy ``lisp.example.com/quux`` within the global module namespace,
unless overridden by a lower ``BUILD.lisp``.
Thus, a file ``/foo/bar/baz/toto.lisp`` would inherit the fullname
``lisp.example.com/quux/baz/toto``.

Nicknames are also allowed, and the same ``BUILD.lisp`` could declare
the nickname ``quux`` and the same file would then be accessible
under the shorter name ``quux/baz/toto``.

Note that everywhere that hierarchical module names are involved,
XCVB uses the "``/``" character as a pathname directory separator,
in a way that is guaranteed to work portably, however things may vary depending on
Lisp implementation, Operating system, pathname host and device.
Also, XCVB will only accept module names where all characters are valid: ``[-_.,A-Za-z0-9]``.
Finally, XCVB assumes that lisp files have type ``lisp`` as far as pathnames are considered.


Search Path
-----------

To map names to files on the current machine,
XCVB relies on the user having properly configured its search path.

The search path is stored in the Lisp variable ``xcvb:*search-path*``
that has a (hopefully) sensible default and
can otherwise be configured through
environment variables, configuration files, or
(in the near future) command-line arguments.

  1- When XCVB starts, it initializes ``xcvb:*search-path*`` to its default,
  by evaluating function ``xcvb::default-search-path`` which evaluates
  and returns the following::

    (list
      *default-pathname-defaults*
      (subpathname (user-homedir-pathname) "lisp/")
      #p"/usr/local/share/common-lisp/modules/"
      #p"/usr/share/common-lisp/modules/"))

  2- If environment variable ``XCVB_PATH`` is set,
  it is read as a "``:``"-delimited list of path strings,
  wherein an entry "``!``" means "splice the previous value".

  3- (In the future) If a command-line argument is specified with ``--path``
  then it is interpreted with the same behavior as above.

  4- Your Lisp configuration or command file may arbitrarily modify
  special variable ``xcvb:*search-path*``
  by prepending and/or appending more pathname designators.

Before XCVB actually tries to process any module,
it will finalize its search path by eliminating all invalid paths
from *search-path* and eagerly collecting a list of all the top-level
``BUILD.lisp`` files under the specified filesystem hierarchies.
Conflicts between two ``BUILD.lisp`` files
claiming the same name or nickname are resolved as follows:
if one ``BUILD.lisp`` appears in a hierarchy
that appears earlier in the search path, then it takes precedence;
if the previous rule doesn't disambiguate a name, then
said name will be marked as a conflict and
will be unavailable for use during the build.
To avoid gratuitous conflicts,
subdirectories named ``_darcs`` or ``.svn``
are conspicuously not searched.

Note to people migrating from ASDF:
this more or less corresponds
to the ``asdf:*central-registry*`` special variable.
However, whereas ASDF relies on lazy dereference of symlinks
and doesn't descend into subdirectories,
XCVB eagerly scans subdirectories and registers available builds.
XCVB works with or without symlinks.



Module Name Resolution
----------------------

When a module form refers to another module, it may use a short name.
The algorithm by which a name reference is resolved to a full name is as follows.

First, names that start with a ``/`` character are absolute names,
and always refer to the global module namespace.
When resolving an absolute name,
the registered BUILD with the longest matching path prefix is identified.
If it is not found, or if there are several conflicting
BUILD files with that same fullname, then an error is raised.
Otherwise, the rest of the name after stripping the prefix is used as
a pathname relative to the identified BUILD.

Second, names that are not absolute are relative names.
Attempt is successively made to resolve them
relative to the current BUILD and each of its ancestors.
Failing that, they are resolved as absolute names as above.



Current Limitations
===================

If your build has any of the below complications,
you're currently out of luck until an extension is written
or unless you write such an extension yourself.

  * your build depends on data files.

  * your build generates lisp files dynamically.

  * your build otherwise uses some ASDF extension.

