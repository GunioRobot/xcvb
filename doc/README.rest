.. ; -*- mode:rst; -*-

===================================================================
XCVB - an eXtensible Component Verifier and Builder for Common Lisp
===================================================================

The goal of this project is to have a scalable system
to build large software in Common Lisp,
featuring deterministic separate compilation and
enforced locally-declared dependencies.


.. Contents::
..
    1  About XCVB
      1.1  Status
      1.2  Home page
      1.3  Dependencies
      1.4  Timeline
      1.5  Documentation
      1.6  Alternative
    2  Using XCVB
      2.1  Building XCVB
      2.2  Converting your ASDF system
      2.3  Starting a new XCVB project
      2.4  Compiling with XCVB
      2.5  Compile-time side-effects
      2.6  Further Limitations


About XCVB
==========

Status
------

Bottom line:
XCVB isn't yet ready as a full replacement for ASDF.
But it is already working and useful
in the simple case with a single big project.

The basic functionality is already working:
you can either write an XCVB project or
automatically convert an existing ASDF project;
XCVB will then create a ``Makefile``
whereby your project can be compiled
in a way that enforces declared dependencies.
You may even compile in parallel with ``make -j``
which on a SMP machine may be faster than ASDF.

What isn't working yet is compiling several projects together,
converting multiple ASDF projects,
handling the harder cases,
etc.


Home page
---------

The home page of the project is at:

	http://common-lisp.net/project/xcvb/

You can checkout our public repository with:

	git clone http://common-lisp.net/project/xcvb/xcvb.git

Or if you are a project member, you can obtain write access using:

	git clone ssh://USER@common-lisp.net/project/xcvb/public_html/xcvb.git

You can also browse the repository at:

	http://github.com/fare/xcvb/tree/master

To use the latest working prototype, you should checkout
the properly tagged code in a branch::

	git checkout -b working_prototype xcvb_0.11


Dependencies
------------

You will need the following pieces of software to get XCVB running:

  * a Lisp implementation. We test with SBCL using the CFASL patch:
	http://cliki.net/SBCL

  * If you want CFASL, you may need this patch to SBCL until it has been merged upstream:
	http://repo.or.cz/w/sbcl/jsnell.git?a=treediff;h=refs/heads/cfasl;hp=refs/heads/master;hb=cfasl;hpb=master

  * cl-launch:
	http://cliki.net/CL-Launch

  * asdf-dependency-grovel:
	http://cliki.net/asdf-dependency-grovel

  * Closer to MOP:
	http://common-lisp.net/project/closer/closer-mop.html

Timeline
--------

The original idea for what became XCVB came from
discussions with James Knight at ITA Software in 2007.

XCVB was originally written by Spencer Brody under the supervision of
Francois-Rene Rideau from late May to mid August 2008.
The result was a working prototype,
but requiring some layer of manual hacks
specific to the target on which XCVB was run
(an internal project at ITA Software).

Francois-Rene Rideau restarted work on it
and released an initial semi-usable prototype
in mid December 2008, where the above hacks were automated away.

ILC'09 has passed, and
We hope to have a complete release with example and documentation
ready for showing at ILC'09 by March 2009.

Now is time to extend and refine the existing functionality,
refactor the internals,
stabilize the API,
implement more features,
document the system, etc.

Subscribe to one of our mailing-lists
if you're interested in learning about our progress
or in influencing our design.


Documentation
-------------

``README.rest``
	This file describes how to currently use xcvb.
	As you can see, XCVB is not ready yet;
	however, development is underway, and things here
	should eventually be greatly simplified.

``xcvb.rest`` ``ilc09-xcvb.rest``
	These files should provide with an overview of the project,
	its intended benefits, rationale and general design.

``INTERNALS.rest``
	This file describes the internals of XCVB.

``TODO.rest``
	The many items to improve XCVB in the future.

``doc/configure.mk.example``
	example file to copy into ``configure.mk`` (in the main xcvb directory) and edit,
	so as to be able to create the ``xcvb`` executable.

``doc/exscribe-migration.lisp.example``
	example file you can run (see on top of it) to migrate exscribe
	from ASDF to XCVB.

``doc/exscribe-compilation.lisp.example``
	example file you can run (see on top of it)
	to compile the migrated exscribe with XCVB.

``setup.lisp.example``
	untested example of customization you might want to adapt XCVB to your project.


Alternative
-----------

Until XCVB is ready for general use,
you may want to use ASDF-DEPENDENCY-GROVEL and POIU
to achieve some of the same benefits with existing technology.


Using XCVB
==========

You may want to checkout the latest xcvb from git.
We'll tag stable releases when there are some.


Building XCVB
-------------

Install the dependencies as listed above, then
create and edit your own ``configure.mk`` from ``doc/configure.mk.example``
and finally ``make``.


Converting your ASDF system
---------------------------

First, you need to use ASDF-TO-XCVB
to convert your existing ASDF system(s)
into a XCVB build based on the ``.asd`` files.

For a simple example, no further documentation yet, see:
	``doc/exscribe-migration.lisp.example``.


Starting a new XCVB project
---------------------------

The general principle is that every Lisp file starts with a form like::

       #+xcvb (module (:depends-on ("packages" "macros" "specials" "foo")))

That form specifies all the dependencies of the Lisp file
and nothing but its dependencies.
Optionally, you can distinguish
between ``:compile-depends-on``
and ``:load-depends-on``.

Finally, a main file called ``BUILD.lisp``
is the main file that needs to be loaded in the final image.
It is typically empty except for the module form specifying
all its dependencies
and possibly some finalization forms to run at the end of the build.
The dependencies typically include ASDF libraries,
currently specified in an ugly way as dependencies of the build image.
The ``BUILD.lisp`` file for Exscribe is as follows::

	#+xcvb
	(module
	  (:fullname "exscribe"
	   :load-depends-on ("exscribe" "exscribe-html" "exscribe-txt" "exscribe-typeset"))
	  (:set :this-module :build-requires
	    	((:asdf "cl-launch")
		 (:asdf "fare-utils") (:asdf "fare-matcher") (:asdf "scribble")
		 (:asdf "cl-typesetting"))))

You don't need to specify all your files in the ``BUILD.lisp`` module form,
only those containing the functions you really care about,
since the dependencies will be automatically identified and loaded.


Compiling with XCVB
-------------------

To compile, you currently need to give ``xcvb`` a command file,
that is a simple Lisp file in that calls the proper XCVB functions.
See ``exscribe-compilation.lisp.example``.

You also typically need a setup file that amongst other things
may load ASDF (if it's not already loaded by your implementation),
customize the ``asdf:*central-registry*``
and otherwise ``proclaim`` the desired optimization settings.

The setup file is specified in the command file
as a dependency to the staged build image,
before any ASDF library that you may want to explicitly include
or that XCVB will automatically insert from the dependencies.
See how this is done in the above-mentionned example file.


Compile-time side-effects
-------------------------

If you use the CFASL option (only available for SBCL at the moment),
only CFASLs of dependencies are loaded at compile-time,
and any defun, defvar or other side-effect used by a macro
must be effected at the ``:compile-toplevel``.

Moreover, if the CFASL option isn't used,
then FASLs of dependencies are loaded at compile-time,
and the same side-effects need to be available at ``:load-toplevel``.

Therefore, any ``defun``, ``defvar`` or other side-effect used by a macro
needs be be enclosed in an ``(eval-when (:compile-toplevel :load-toplevel :execute) ...)``.
(Actually the ``:execute`` is not necessary in code you write manually,
but you probably want to include it in any macro that generates an ``eval-when``).


Combining Multiple Projects
===========================

Module Full Names
-----------------

XCVB relies on a global namespace for developers to name modules.
Using this namespace allows programmers to name modules independently
from their specific location on any particular machine's filesystem.

Thus each hierarchy of XCVB files contains a top-level ``BUILD.lisp`` file.
This file contains a module declaration with a ``:fullname`` initializer
that specifies a prefix name for all modules in the hierarchy.
E.g. if your directory ``/foo/bar/`` has a file ``BUILD.lisp``
containing the specification ``:fullname "com.example.lisp/quux"``
then all files under this file hierarchy will be considered as being under
the hierarchy ``com.example.lisp/quux`` within the global module namespace,
unless overridden by a lower ``BUILD.lisp``.
Thus, a file ``/foo/bar/baz/toto.lisp`` would inherit the fullname
``com.example.lisp/quux/baz/toto``.

Nicknames are also allowed, and the same ``BUILD.lisp`` could declare
the nickname ``quux`` and the same file would then be accessible
under the shorter name ``quux/baz/toto``.


Module Relative Names
---------------------

When a module form refers to another module, it may use a short name.
The algorithm by which a name reference is resolved to a full name is as follows:

  ... (TODO: document the algorithm) ...


Search Path
-----------

To map names to files on the current machine,
XCVB relies on the user having properly configured its search path.

The search path is stored in the Lisp variable ``xcvb:*search-path*``
that has a (hopefully) sensible default and
can otherwise be configured through
environment variables, configuration files, or
(in the near future) command-line arguments.

  1- When XCVB starts, it initializes ``xcvb:*search-path*`` to its default,
  by evaluating function ``xcvb::default-search-path`` which evaluates
  and returns the following::

    (list
      *default-pathname-defaults*
      (subpathname (user-homedir-pathname) "lisp/")
      #p"/usr/local/share/common-lisp/modules/"
      #p"/usr/share/common-lisp/modules/"))

  2- If environment variable ``XCVB_PATH`` is set,
  it is read as a "``:``"-delimited list of path strings,
  wherein an entry "``!``" means "splice the previous value".

  3- (In the future) If a command-line argument is specified with ``--path``
  then it is interpreted with the same behavior as above.

  4- Your Lisp configuration or command file may arbitrarily modify
  special variable ``xcvb:*search-path*``
  by prepending and/or appending more pathname designators.

Before XCVB actually tries to process any module,
it will finalize its search path by eliminating all invalid paths
from *search-path* and eagerly collecting a list of all the top-level
``BUILD.lisp`` files under the specified filesystem hierarchies.
Conflicts between two ``BUILD.lisp`` files
claiming the same name or nickname are resolved as follows:
if one ``BUILD.lisp`` appears in a hierarchy
that appears earlier in the search path, then it takes precedence;
if the previous rule doesn't disambiguate a name, then
said name will be marked as a conflict and
will be available for use during the build.

Note to people migrating from ASDF:
this more or less corresponds
to the ``asdf:*central-registry*`` special variable.


Current Limitations
===================

If your build has any of the below complications,
you're currently out of luck until an extension is written
or unless you write such an extension yourself.

  * your build depends on data files.

  * your build generates lisp files dynamically.

  * your build otherwise uses some ASDF extension.

