.. ; -*- mode:rst; -*-

===================================================================
XCVB - an eXtensible Component Verifier and Builder for Common Lisp
===================================================================

The goal of this project is to have a scalable system
to build large software in Common Lisp,
featuring deterministic separate compilation and
enforced locally-declared dependencies.


.. Contents::
..
    1  About XCVB
      1.1  Status
      1.2  Home page
      1.3  Dependencies
      1.4  Documentation
      1.5  Timeline
    2  Using XCVB
      2.1  Building XCVB
      2.2  Starting a new XCVB project
      2.3  Compiling with XCVB
      2.4  Lisp Setup
    3  Restrictions on your Lisp Code
      3.1  Compile-time side-effects
      3.2  Full library needed at compile-time
      3.3  Optimization settings
      3.4  Requiring System Components
    4  Combining Multiple Projects
      4.1  Module Full Names
      4.2  Search Path
      4.3  Module Name Resolution
      4.4  Dumping Images
    5  Additional Features
      5.1  Lisp file generation
      5.2  Data Dependencies
      5.3  Conditional Dependencies
      5.4  Warning control
    6  XCVB and ASDF
      6.1  Depending on ASDF systems
      6.2  ASDF systems depending on XCVB builds
      6.3  Converting your ASDF systems


About XCVB
==========

Status
------

Bottom line:
XCVB is available as a working deterministic build system for beta-testers.
It isn't yet ready as a full replacement for ASDF for the Lisp masses.

The current version (in git master branch or the release tarball)
can handle builds of big, complex systems,
though it is neither feature-rich nor user-friendly.

You can either write your project directly as an XCVB build
or automatically convert an existing ASDF project
(manual work required if ASDF extensions are used).
XCVB will then help you create a ``Makefile`` for your project,
whereby it can be compiled in a way that enforces declared dependencies.
You may even compile in parallel with ``make -j``
which on a SMP machine may end up being faster than ASDF.

XCVB builds can depend on other builds and/or on ASDF systems.
ASDF systems can be superseded by incrementally migrated XCVB builds when available,
for better dependency management.

Hopefully a version 1.0 will be released at the end of this summer
that can seriously replace ASDF and provide a migration path.


Home page
---------

The home page of the project is at:

	http://common-lisp.net/project/xcvb/

You can find a tarball containing XCVB, all its dependencies, and a few generated files
sufficient to bootstrap the whole thing (depending on CLISP or SBCL with or without CFASL) in:

           http://common-lisp.net/project/xcvb/releases/

You can checkout our public repository with::

	git clone http://common-lisp.net/project/xcvb/git/xcvb.git

Or if you are a project member, you can obtain write access using::

	git clone ssh://USER@common-lisp.net/project/xcvb/git/xcvb.git

You can also browse the repository at either of these:

	http://common-lisp.net/gitweb?p=projects/xcvb/xcvb.git;a=summary

	http://github.com/fare/xcvb/tree/master

We also have two mailing-lists, one reserved for announcements,
``xcvb-announce`` http://www.common-lisp.net/mailman/listinfo/XCVB-announce
and one open to general discussions,
``xcvb-devel`` http://www.common-lisp.net/mailman/listinfo/xcvb-devel


Dependencies
------------

As mentioned above, you can find a tarball with all dependencies
sufficient to bootstrap XCVB at:

           http://common-lisp.net/project/xcvb/releases/


You will still need a Lisp implementation to build or run XCVB and the software it builds:

  * We test with SBCL (CFASL support is included in SBCL 1.0.30.4 or later):
	- homepage: http://sbcl.sourceforge.net/
	- CLiki page: http://cliki.net/SBCL
        - get it from: http://sbcl.sourceforge.net/platform-table.html

If you prefer to collect XCVB's dependencies manually into your system,
you will need the following Lisp software libraries to get XCVB running:

  * cl-launch 2.21 or later:
	- homepage: http://cliki.net/CL-Launch
	- getting it:
		``git clone http://common-lisp.net/project/xcvb/git/cl-launch.git``
        - getting it, if you're an XCVB project member::
        	``git clone ssh://USER@common-lisp.net/project/xcvb/git/cl-launch.git``

  * ASDF 1.354 or later:
	- homepage: http://cliki.net/asdf
	- getting it:
		``git clone http://common-lisp.net/project/asdf/asdf.git``
        - getting it, if you're an ASDF project member:
		``git clone ssh://USER@common-lisp.net/project/asdf/asdf.git``

  * Our fork of asdf-dependency-grovel:
	- homepage: http://cliki.net/asdf-dependency-grovel
	- getting it:
		``git clone http://common-lisp.net/project/xcvb/git/asdf-dependency-grovel.git``
        - getting it, if you're an XCVB project member:
		``git clone ssh://USER@common-lisp.net/project/xcvb/git/asdf-dependency-grovel.git``

  * Closer to MOP, with our trivial XCVB patch:
	- homepage: http://common-lisp.net/project/closer/closer-mop.html
	- getting it for now:
		``darcs get http://www.common-lisp.net/project/xcvb/darcs/closer-mop``
	- getting it, once the XCVB patch has been accepted upstream:
		``darcs get http://www.common-lisp.net/project/closer/darcs/closer-mop``

  * command-line-arguments:
	- homepage: http://common-lisp.net/project/qitab/
	- getting it:
		``git clone http://common-lisp.net/project/qitab/git/command-line-arguments.git``
        - getting it, if you're a QITAB project member::
        	``git clone ssh://USER@common-lisp.net/project/qitab/git/command-line-arguments.git``


Documentation
-------------

``doc/README.rest``
	The present file describes how to currently use XCVB.

``doc/xcvb.rest`` ``doc/ilc09-xcvb.rest`` ``doc/ilc09-xcvb-slides.rest``
	These files should provide with an overview of the project,
	its intended benefits, rationale and general design.

``doc/ilc09-xcvb-paper.tex`` ``doc/xcvb.bib`` ``doc/sigplanconf.cls``
	These source files compile to a PDF for the demonstration
        that was presented at ILC'2009 for XCVB.

``doc/INTERNALS.rest``
	This file is an introduction to the internals of XCVB
        for hackers interested in debugging or extending it.

``doc/TODO.rest``
	The many prioritized TO DO items on our plate to improve XCVB.
        Some already implemented items should be moved to current documentation.

``doc/configure.mk.example``
	example file to copy into ``configure.mk`` (in the main XCVB directory) and edit,
	so as to be able to create the ``xcvb`` executable.

``Makefile``
	the Makefile for XCVB itself is an example for how to integrate XCVB in your Makefile.
        Note that the setup.lisp complexity is only required if you're using ASDF.


Timeline
--------

The original idea for what became XCVB is due to James Knight,
in 2007 discussions about the failure of POIU and ASDF-DEPENDENCY-GROVEL
to yield a *maintainable* alternative to serial ASDF systems
for the QRes project at ITA Software.

XCVB was originally written by Spencer Brody under the supervision of
Francois-Rene Rideau from late May to mid August 2008.
The result was a working prototype,
but lacking in features and requiring some layer of manual hacks
specific to the target on which XCVB was run.

Francois-Rene Rideau restarted work on it
and released in mid December 2008
a version of the prototype where the above hacks were automated away.
A paper about the prototype was presented at ILC'09.
The prototype can be retrieved in a git branch::

	git pull http://common-lisp.net/project/xcvb/git/xcvb.git v0.1-prototype:v0.1-prototype
	git checkout v0.1-prototype

Francois-Rene Rideau then undertook a complete rewrite of XCVB
to make its architecture more general and actually extensible
building on the lessons of the prototype.
A semi-usable product was published in May 2009,
and usable release tarballs have been produced since July 2009,
with notable contributions from Joyce Chen and Matthew Steele.

In late August 2009, we released XCVB 0.366 which successfully
compiled a large system at ITA.

We are working hard towards making a 1.0 release usable by
random Common Lisp programmer by the end of 2009.

Subscribe to one of our mailing-lists
if you're interested in learning about our progress
or in influencing our design.


Using XCVB
==========

You may want to checkout the latest XCVB from git.
We'll tag stable releases when there are some.


Building XCVB
-------------

The simple way to build XCVB is to use our release tarballs,
and just follow the instructions in the ``INSTALL`` file.

The hard way to build XCVB is to install all the dependencies as listed above,
then create and edit your own ``configure.mk`` from ``doc/configure.mk.example``.
You'll notably need to configure those dependencies to work with ASDF:
typically, you'll create somewhere a ``systems/`` directory,
in which you'll create a symlink to each of the ``.asd`` files in your dependencies,
and in your ``configure.mk`` tell ``cl-launch`` to use said directory
with an appropriate ``--path`` option.
You can now to bootstrap XCVB using ASDF with ``make xcvb-using-asdf``.
If successful, you may finally complete the bootstrap of XCVB using XCVB itself,
by exporting the proper ``XCVB_PATH`` and then invoking ``make xcvb``.

Assuming you installed ``xcvb`` into some directory in your ``$PATH``,
you can test that XCVB built correctly by using the following query commands::

	xcvb version
	xcvb show-search-path


Starting a new XCVB project
---------------------------

The general principle is that every Lisp file starts with a form like::

       #+xcvb (module (:depends-on ("packages" "macros" "specials" "foo")))

That form specifies all the dependencies of the Lisp file
and nothing but its dependencies.
Optionally, you can distinguish
between ``:compile-depends-on``
and ``:load-depends-on``.

Finally, a main file called ``build.xcvb``
is the main file that needs to be loaded in the final image.
It is typically empty except for the module form specifying
all its dependencies
and possibly some finalization forms to run at the end of the build.
The dependencies typically include ASDF libraries,
currently specified in an ugly way as dependencies of the build image.
The ``build.xcvb`` file for Exscribe is as follows::

	#+xcvb
        (module
          (:fullname "fare.tunes.org/exscribe"
           :build-depends-on ((:asdf "cl-launch") (:asdf "fare-utils")
                              (:asdf "fare-matcher") (:asdf "scribble")
                              (:asdf "cl-typesetting"))
           :depends-on ("exscribe" "exscribe-html" "exscribe-txt" "exscribe-typeset")
           :build-image t))

You don't need to specify all your files in the ``build.xcvb`` module form,
only those containing the functions you really care about,
since the dependencies will be automatically identified and loaded.


Compiling with XCVB
-------------------

To compile with XCVB,
you first need to have XCVB generate a ``Makefile`` for your project
with the ``make-makefile`` command,
then to invoke ``make(1)`` with this ``Makefile``.

A simple example would be::

	xcvb make-makefile --build /foo/bar --lisp-implementation sbcl

Where ``/foo/bar`` is the fullname of your build.

The default name for said generated ``Makefile``
is actually ``xcvb.mk`` in the current directory,
but you can override either or both of this name and that directory
with the ``--output-path`` option to ``make-makefile``.

For a correct build, it is recommended that you should run
the ``xcvb make-makefile`` command before every time you build,
in case any dependency has changed due to some modification.
XCVB should be fast and this shouldn't be a problem.
If making the Makefile takes more than a few seconds,
there's probably a performance bug and you should contact us.

After obtaining your ``xcvb.mk``, you may invoke ``make(1)``
using this output file in the following way::

	make -f xcvb.mk -j obj/foo/bar.image

Where ``obj`` is the object directory
(which can be overridden with option ``--object-directory`` of ``make-makefile``),
``-j`` specifies a parallel build (avoid it when debugging),
and ``foo/bar.image`` would be the name of the image for your project
(assuming its build has fullname ``/foo/bar`` and declares ``:build-image t``.)

From the image, you can create an executable with such a command as::

	cl-launch --lisp sbcl --image obj/foo/bar.image \
		--output bar --dump ! --restart 'bar::main'

As an example of how to put it all together, see XCVB's own ``Makefile``.


Lisp Setup
----------

It is often useful or necessary to setup your target Lisp system
before you start to compile files and build images with it.

Such setup may include
proclaiming optimization settings,
loading and configuring ASDF (see below `Depending on ASDF systems`_),
configuring variables that control your Lisp implementation,
selecting compiler warnings you want to silence (see below `Warning control`_),
declaring features for conditional compilation based on some environment variables,
initializing some pathname translation layer such as logical pathnames,
extensions to the build system,
loading specialized handlers for ASDF-DEPENDENCY-GROVEL when it is used,
etc.,
to name a few things that have been done as part of ITA Software's build.

The setup file is specified with option ``--setup`` to ``xcvb make-makefile``,
followed by the fullname of an XCVB Lisp module,
following usual XCVB naming conventions.
For instance, assuming your project has fullname ``/foo/bar``,
you may create an XCVB module called ``setup.lisp`` under your build directory,
and specify ``--setup /foo/bar/setup`` as arguments to ``xcvb make-makefile``.


Restrictions on your Lisp Code
==============================

Compile-time side-effects
-------------------------

When someone uses the CFASL option
only CFASLs of dependencies are (by default) loaded at compile-time,
and any ``defun``, ``defvar`` or other side-effect used by a macro
must be effected at the ``:compile-toplevel``.

Moreover, when the CFASL option isn't used,
then FASLs of dependencies are loaded at compile-time,
and the same side-effects need to be available at ``:load-toplevel``.

Therefore, any ``defun``, ``defvar`` or other side-effect used by a macro
needs be be enclosed in an ``(eval-when (:compile-toplevel :load-toplevel :execute) ...)``.
(Actually the ``:execute`` is not necessary in code you write manually,
but you probably want to include it in any macro that generates an ``eval-when``).

Note that CFASLs are only available for SBCL at the moment,
but there are plans for Clozure CL to support it if and when XCVB takes off.


Full library needed at compile-time
-----------------------------------

Sometimes, you actually want the full run-time power
of a library to be available at compile-time,
rather than only the definition of its macros and other usual compile-time side-effects.

You can achieve this by including your required dependencies in the
``:build-depends`` option of your ``build.xcvb``,
or the ``:compile-depends`` option of your Lisp module.

Indeed, when you specify a dependency in a ``:depends-on`` clause,
the dependency will be added to the load dependencies of the module
as if by ``:load-depends-on``,
and the compile-time-only version of the dependency (if available)
will be added to the compile dependencies of the module,
as if by ``:compile-depends-on``.
For instance, a ``:depends-on (... "foo" ...) will specify
a load-time dependency on ``(:fasl "foo")`` and
a compile-time dependency on ``(:cfasl "foo")``.

Note however that nothing is done to prevent both the FASL and CFASL to be loaded,
in any order implicit in the transitive dependencies of a module.
This can cause interesting surprises if any of those compile-time side-effects
are not idempotent, and/or if loading the CFASL resets some work done by the FASL.
Consider notably the proper use of ``defvar`` vs ``defparameter`` at compile-time.


Optimization settings
---------------------

Amongst compile-time side-effects, a notable one is the optimization settings.
A default may to be set in your initial Lisp image setup,
as explained in section `Lisp Setup`_.
Modules that want to change from the default specified for the whole compilation
should explicitly ``declaim`` it.
You may define some macro that does that for you,
that you will call at the beginning of relevant files.
A module may change the default for subsequent modules that explicitly depend on them
by using a ``(eval-when (:compile-toplevel :load-toplevel) (proclaim ...))``.
Unless of course overridden by a further explicitly depended-upon module
that uses the same trick.


Requiring System Components
---------------------------

At this time, XCVB doesn't include special support for implementation-dependent components
that may be loaded into your Lisp system via ``(cl:require ...)``.
For instance, such popular components include ``:sb-posix`` and ``:sb-bsd-sockets`` under SBCL.

You may load such components by including the following in your initial package definition file,
after your ``(cl:in-package :cl-user)`` statement,
and before any ``(defpackage ...)`` clause that may import from the system::

	(eval-when (:compile-toplevel :load-toplevel :execute)
          #+sbcl (require :sb-posix))

It is *NOT* OK to (conditionally or not) declare a dependency on an ASDF system for ``:sb-posix``,
as do some ``.asd`` files of some popular Lisp libraries, as this is not guaranteed to work.


Combining Multiple Projects
===========================

Module Full Names
-----------------

XCVB relies on a global namespace for developers to name modules.
Using this namespace allows programmers to name modules independently
from their specific location on any particular machine's filesystem.

Thus each hierarchy of XCVB files contains a top-level ``build.xcvb`` file.
This file contains a module declaration with a ``:fullname`` initializer
that specifies a prefix name for all modules in the hierarchy.
E.g. if your directory ``/foo/bar/`` has a file ``build.xcvb``
containing the specification ``:fullname "lisp.example.com/quux"``
then all files under this file hierarchy will be considered as being under
the hierarchy ``lisp.example.com/quux`` within the global module namespace,
unless overridden by a lower ``build.xcvb``.
Thus, a file ``/foo/bar/baz/toto.lisp`` would inherit the fullname
``lisp.example.com/quux/baz/toto``.

Nicknames are also allowed, and the same ``build.xcvb`` could declare
the nickname ``quux`` and the same file would then be accessible
under the shorter name ``quux/baz/toto``.

Note that everywhere that hierarchical module names are involved,
XCVB uses the "``/``" character as a pathname directory separator,
in a way that is guaranteed to work portably, however things may vary depending on
Lisp implementation, Operating system, pathname host and device.
Also, XCVB will only accept module names where all characters are valid: ``[-_.,A-Za-z0-9]``.
Finally, XCVB assumes that lisp files have type ``lisp`` as far as pathnames are considered.


Search Path
-----------

To map names to files on the current machine,
XCVB relies on the user having properly configured its search path.

The search path is stored in the Lisp variable ``xcvb:*search-path*``
that has a (hopefully) sensible default and
can otherwise be configured through
environment variables, configuration files, or
(in the near future) command-line arguments.

  1- When XCVB starts, it initializes ``xcvb:*search-path*`` to its default,
  by evaluating function ``xcvb::default-search-path`` which evaluates
  and returns the following::

    (list
      *default-pathname-defaults*
      (subpathname (user-homedir-pathname) "lisp/")
      #p"/usr/local/share/common-lisp/source/"
      #p"/usr/share/common-lisp/source/"))

  2- If environment variable ``XCVB_PATH`` is set,
  it is read as a "``:``"-delimited list of path strings,
  wherein an entry "``!``" means "splice the previous value".

  3- (In the future) If a command-line argument is specified with ``--path``
  then it is interpreted with the same behavior as above.

  4- Your Lisp configuration or command file may arbitrarily modify
  special variable ``xcvb:*search-path*``
  by prepending and/or appending more pathname designators.

Before XCVB actually tries to process any module,
it will finalize its search path by eliminating all invalid paths
from *search-path* and eagerly collecting a list of all the top-level
``build.xcvb`` files under the specified filesystem hierarchies.
For this reason, you will want to include as narrow directory hierarchies
as you can in the search path. ``/opt/share/common-lisp/source/``
is probably good, whereas ``/`` or ``/usr`` may result in minutes or hours
being spent searching your whole filesystem in vain.

Conflicts between two ``build.xcvb`` files
claiming the same name or nickname are resolved as follows:
if one ``build.xcvb`` appears in a hierarchy
that appears earlier in the search path, then it takes precedence;
if the previous rule doesn't disambiguate a name, then
said name will be marked as a conflict and
will be unavailable for use during the build.
To avoid gratuitous conflicts,
subdirectories named ``_darcs`` or ``.svn``
are conspicuously not searched.

You can query your current search path with the command::

	xcvb search-search-path

Also available is the short-hand ``xcvb ssp``.


_`Note to people migrating from ASDF`_:
this more or less corresponds
to the ``asdf:*central-registry*`` special variable.
However, whereas ASDF relies on lazy dereference of symlinks
and doesn't descend into subdirectories,
XCVB eagerly scans subdirectories and registers available builds.
XCVB works with or without symlinks.


Module Name Resolution
----------------------

When a module form refers to another module, it may use a short name.
The algorithm by which a name reference is resolved to a full name is as follows.

First, names that start with a ``/`` character are absolute names,
and always refer to the global module namespace.
When resolving an absolute name,
the registered build with the longest matching path prefix is identified.
If it is not found, or if there are several conflicting
build files with that same fullname, then an error is raised.
Otherwise, the rest of the name after stripping the prefix is used as
a pathname relative to the identified build.

Second, names that are not absolute are relative names.
Attempt is successively made to resolve them
relative to the current build and each of its ancestors.
Failing that, they are resolved as absolute names as above.


Dumping Images
--------------

Each build may specify with ``:build-image t``
that an image should be dumped after the build is completed.
This is most useful in your toplevel build to prepare an image
from which you'll latter build an executable with ``cl-launch``,
as explained in section `Compiling with XCVB`_.

Each build may also specify with ``:pre-image t``
that an image should be dumped before the build itself is started,
containing all the dependencies specified with ``:build-depends-on``.
This can notably speed up compilation if your build
has both a lot of build dependencies and a lot of files,
as compared to leaving this unspecified
in which case all these many dependencies will be re-loaded
before the compilation of each and every file in your build.

In any case, whenever it compiles a build,
XCVB will try to reuse an existing image if any is available,
based on the first build dependency.
Therefore, to maximize image reuse, make sure that the first dependency
listed in a build's ``:build-depends-on`` is itself
a build that has a post- or pre- image
that already includes as many dependencies as possible.


Additional Features
===================

Lisp file generation
--------------------

XCVB supports the dynamic generation of Lisp files.

Statements of generated files are to be included amongst the
"extension forms" of your ``build.xcvb`` file,
i.e. after the list of keyword options
``(:fullname ... :depends-on ...)``.

Here is the current temporary syntax::

	(:generate
         ((:lisp "lists"
           :depends-on ("conditions" "util" "specials" "packages"))
          (:lisp "hash-tables"
           :depends-on ("lists"))
          (:lisp "methods"
           :depends-on ("api" "hash-tables")))
         :depends-on ("build/dump"))

In this example declaration, excerpted from ``cl-unicode``,
Here, ``"lists"``, ``"hash-tables"``, and ``"methods"``
are files that are generated by loading ``"build/dump"``.
Each ``(:lisp ...)`` statement takes a name,
then a list of keyword option as in a Lisp module specification.
A grain for a Lisp module will thus be assumed,
with the specified name relative to the current build.
Dependencies for this module will be
as specified statically from these keyword options.
and not deduced dynamically from the contents of the file once created
(indeed these contents may lack a module statement altogether).
To build the specified Lisp files, the dependencies specified in
the ``:depends-on`` argument will be loaded.
These dependencies may usefully include in the end
a statement like ``(:call :my-package :my-function)``
to call a function to be defined in previously loaded dependencies,
or like ``(:eval-string "(arbitrary lisp expression)")``
to evaluate some arbitrary lisp expression.

Also note that if your file is to be computed by some arbitrary shell command
that does not reduce to the loading of a Lisp file, then
XCVB doesn't currently support the explicit specification of such a thing,
but you can instead insert such a dependency directly in your ``Makefile``,
e.g.::

	version.lisp: version.text
		echo "(in-package :foo)(defparameter *version* \"$$(cat version.text)\")" > $@


Data Dependencies
-----------------

XCVB supports the declaration of dependencies on data files
during the building of some targets.

Here is the current temporary syntax::

	(:depends-on ("build/read" "build/char-info" "build/util" "util" "specials" "packages")
         :load-depends-on ((:source "build/data/BidiMirroring.txt")
                           (:source "build/data/Blocks.txt")
                           (:source "build/data/DerivedAge.txt")
                           (:source "build/data/Jamo.txt")
                           (:source "build/data/PropList.txt")
                           (:source "build/data/Scripts.txt")
                           (:source "build/data/UnicodeData.txt")))

This example, excerpted from ``cl-unicode`` shows how
loading the current module ``build/dump``
depends on bunch data files in ``build/data``.


Conditional Dependencies
------------------------

XCVB supports the specification of conditional dependencies
using the following syntax for dependencies:

	``(:when (:featurep (:or :sbcl :cmu)) "pcl")``

When such a dependency is specified, the module named ``"pcl"``
(relative to the current build's fullname) will be included
when and only when the target Lisp implementation has the feature
``:sbcl`` or the feature ``:cmu``, i.e. is SBCL or CMUCL.

Note that XCVB does *not* support CL-style conditional reading with
``#+`` and  ``#-`` within the ``(module ...)`` form.
Instead the form is read in a dynamic context
where ``*features*`` has been bound to ``'(:xcvb)``.
Indeed, read-time conditionals lose information at read-time
whereas XCVB purports to build a faithful model of the whole build,
from which one could e.g. extract a list of source files.


Warning control
---------------

XCVB provides a simple way to specify which compiler conditions (style-warnings, etc.)
to show to the user and which to muffle.
This feature is very useful to make sure that warnings the user cares about are caught,
whereas those considered as noise are filtered out.

This feature is defined in ``driver.lisp`` (fullname ``/xcvb/driver``),
the one file included in all target images by XCVB.
You may modify the special variable ``xcvb-driver:*uninteresting-conditions*``
in the file you specify through XCVB's ``--setup`` option.

How to identify compiler conditions is specific to your Lisp implementation.
Typically you may have to grep the sources of said implementation to find
a condition type or a simple-condition's format-control string.
In more advanced cases, you may can define your own predicate to
discriminate the conditions you're looking to keep or eliminate.


XCVB and ASDF
=============

Depending on ASDF systems
-------------------------

You may in some ``(module ...)`` declaration include a dependency on ``(:asdf "foo")``
which XCVB will interpret as requiring the loading of such an ASDF
with ``(asdf:oos 'asdf:load-op "foo")``.

However, if amongst your dependencies there are any ASDF systems
that haven't yet been converted to XCVB,
then you'll need a setup file (as per `Lisp Setup`_)
to load ASDF and configure its ``*central-registry*``.

In simple cases, your personal ``setup.lisp`` may be as simple as the following::

	(in-package :cl-user)
	(require :asdf)
        (push "/path/to/my/asdf/systems/" asdf:*central-registry*)

In slightly harder cases, you may call ``cl-launch`` to the rescue::

	cl-launch --lisp clisp --path /path/to/my/asdf/systems -B print_lisp_setup > setup.lisp

XCVB's own ``Makefile`` includes a target to build a ``setup.lisp``
using the same principle, but additionally leveraging the pre-existing
``cl-launch`` configuration that was used for compiling XCVB itself
(when bootstrapped with ASDF).

In yet harder cases, a robust semi-portable ``setup.lisp``
may contain the usual ASDF hackery, including such snippets as::

	(in-package :cl-user)
        (eval-when (:compile-toplevel :load-toplevel)
          (defun get-env-var (x)
            #+sbcl (sb-ext:posix-getenv x)
            #+clozure (ccl:getenv x))
          (let ((use-poiu (get-env-var "USE_POIU")))
            (when (and use-poiu (not (equal use-poiu "")))
              (pushnew :parallel-build *features*)))
          (defparameter *l* (make-pathname :name nil :type nil :defaults *load-pathname*))
          (unless (and (find-package :asdf) (find-symbol "SYSTEM" :asdf))
            (block asdf-load
              (handler-bind
                  ((error #'(lambda (c)
                              (declare (ignore c))
                              (load (merge-pathnames "libs/asdf/asdf.lisp" *l*))
                              (return-from asdf-load nil))))
                (require :asdf)))))
        #+parallel-build
        (unless (find-symbol "PARALLEL-LOAD-OP" :asdf)
          (load (merge-pathnames "libs/poiu/poiu.lisp" *l*)))
        (let* ((asds (directory (merge-pathnames #P"**/*.asd" *l*)))
               (asd-dirs (remove-duplicates (mapcar #'pathname-directory asds) :test #'equal)))
           (dolist (subdir asd-dirs)
             (unless (search '("_darcs" "pristine") subdir :test #'equal)
               (pushnew (namestring (make-pathname :directory subdir)) asdf:*central-registry*
                        :test #'equal))))


ASDF systems depending on XCVB builds
-------------------------------------

A current limitation of both XCVB and ASDF is that
ASDF systems cannot at this time depend on XCVB builds.

Therefore, any ASDF system that depends on software that may be build with XCVB
will have to actually depend on some software built with ASDF itself.
This may be done by maintaining the ``.asd`` system for said software.

There may at this point be "interesting" conflicts if some software is loaded
both as an ASDF system and an XCVB build.
If such conflict bites you, you may want to convert to XCVB
any system that causes this conflict.

As a kluge, if you really don't want to convert such system to XCVB,
you may hack your XCVB ``build.xcvb`` specifications
to specify dependencies on such software as ``(:asdf "foo")``
instead of ``(:build "foo")`` or ``"foo"`` or ``"/foo"``,
and/or plainly comment them out if said dependencies are loaded as part of your ``setup.lisp``.
If you specify ``(:asdf "foo")``,
you may want to take any ``build.xcvb`` that ``:supersedes-asdf ("foo")``
out of your ``XCVB_PATH``, and/or create a conflict for it,
and/or comment out said ``:supersedes-asdf`` declaration.

Contact the authors of XCVB if any help is required.


Converting your ASDF systems
----------------------------

In simple cases, you may convert a system from ASDF to XCVB with a command such as::

	xcvb asdf-to-xcvb \
                --setup /path/to/lisp/file/to/setup/asdf/if/not/builtin/to/your/lisp \
		--system-path /path/to/your/asdf/systems/ \
		--system-path /path/to/more/asdf/systems/ \
                --preload some-system-to-preload-and-not-instrument \
                --preload another-system-to-preload-and-not-instrument \
                --preload yet-another-system-to-preload-and-not-instrument \
                --system main-system \
                --system another-system-to-merge-with-it \
                --system yet-another-system-to-merge-with-it


In cases where the above fails, common pitfalls include the following:

  * If your system has conditional dependencies (as in ``#+sbcl ...``) then
    you'll have to manually add such dependencies
    to the ``:depends-on`` of the proper XCVB module,
    or possibly as part of your ``:build-depends-on``.

  * If your system has some generated files, then you'll have to add the
    proper entries manually in your ``build.xcvb``.
    On the other hand, you won't have to reimplement in XCVB
    the kludges that were necessary to have that kind of work under ASDF,
    for XCVB has built-in and correctly working support for such generated files.

  * If some of your files have data dependencies,
    the converter may get confused by any ASDF extension used for this purpose,
    and you may have to either convert manually, or strip down your ``.asd`` file
    into something that ASDF-DEPENDENCY-GROVEL may understand,
    then add data dependencies by hand.
    To conditionally modify your ``.asd`` file, you may use ``#+asdf-dependency-grovel``
    or otherwise do conditional compilation based on some symbol that you ``push`` into
    ``*features*`` in your setup file.

  * If your system requires some other ASDF extension,
    that isn't yet supported by XCVB, it will have to be converted manually.
    Please also contact the authors of XCVB.

  * If your files define compile-time datastructures, you may have to
    either extend ``asdf-dependency-grovel`` to support your defining primitives
    (see the ``handlers/`` directory of ASDF-DEPENDENCY-GROVEL),
    or to manually use ADG's ``signal-provider`` and ``signal-user`` functions
    to manually declare otherwise undetected dependencies.

  * If your system includes magic build-time side-effects inside the ``.asd`` file itself,
    then you'll have to provide any such effects in a different way with XCVB.
    For instance, you may include any required ``(pushnew ... *features*)`` in an ``eval-when``
    near the top of your package definition file, or in a Lisp file at the end of your build.

Additionally, figuring out the dependencies between your Lisp modules
may not suffice to obtain a system that compiles with XCVB.
You will still have to edit your code so that it follows the
`Restrictions on your Lisp Code`_, most notably regarding the proper usage of ``eval-when``.
