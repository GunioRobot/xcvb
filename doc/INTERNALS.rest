.. ; -*- mode:rst; -*-

==============
XCVB Internals
==============

This file describes the current internals of XCVB.

Unless you check it out as of an official release as tagged in git,
it may or may not be up to date.


.. contents::
..
    1  Files
      1.1   pkgdcl.lisp
      1.2   xcvb.lisp
      1.3   extensions.lisp
      1.4   utilities.lisp
      1.5   asdf-extensions.lisp
      1.6   traverse.lisp
      1.7   specials.lisp
      1.8   makefile-generator.lisp
      1.9   asd-generator.lisp
      1.10  asdf-converter.lisp
    2  Good places to extend xcvb
    3  Notes


Files
=====

pkgdcl.lisp
-----------

This file creates the xcvb package and exports the necessary symbols.


xcvb.lisp
---------

This file contains the bulk of the code
to read the module forms from the top of the source files
and construct the dependency graph.

The main entry point into this file is through the functions
create-dependency-graph and create-dump-image-graph.
Both of these take a pathspec for the source file
whose dependency graph is being created.
They will read the module form from the top of the source file,
and create a module object to represent it.
Then a lisp-image-node will be created
to represent a lisp image with the fasl for the given source-file loaded.
The lisp-image-node will have one compile-dependency:
the fasl-node for the given source file.
It then uses the function create-dependency-node
to create nodes of the proper type for each of that file's dependencies.
The function create-dependency-node destructures
the dependency list from the module for the file
and uses the generic function create-dependency-node-from-type
to create a dependency-graph-node of the proper type
for each of the node's dependencies.
This process will repeat recursively
until the whole dependency graph is created.
If you add a new type of dependency-graph-node,
it is important to create a new method on create-dependency-node-from-type
so that there is a way to specify that type of dependency
in a module declaration.


extensions.lisp
---------------

This file contains the defextension macro
and a couple of pre-defined extensions.

The defextension macro defines a function and specifies a keyword
that can be used to specify that function
in the extension forms part of a module declaration.
The extension functions from a module form are applied
right after the module form has been parsed into a module object.


utilities.lisp
--------------

A collection of utility functions.


asdf-extensions.lisp
--------------------

This file adds a function in the asdf package
to determine whether or not an asdf system needs to be re-compiled.


traverse.lisp
-------------

This file contains the function traverse,
as composed from a collection of methods.
It provides a couple of different ways
of topologically sorting the dependency graph.

It probably should be refactored to be automatically deduced
from a higher-level description of the operators underlying
the creation of the graph.


specials.lisp
---------------------

A collection of global variables,
many of which can be used to customize the behavior
of the user-visible parts XCVB.


makefile-generator.lisp
-----------------------

This file contains the code to take a dependency graph
and write a Makefile that can be used by make
to compile the system specified by the graph.
The entry point to this file should be the write-makefile function.
This function takes the path to a lisp source file,
and will construct a dependency graph for that file,
then write a makefile in the directory specifed by output-path
that will be able to compile the system.
The generated makefile starts by using the specified lisp executable
(as specified in compiler-options.lisp)
to dump an image with xcvb loaded,
along with any other files/systems that are specified
in the build-requires slot of the module for the BUILD.lisp file
that is associated with the source file whose dependency graph
is being written to the makefile.


asd-generator.lisp
------------------

This file contains the code to take a dependency graph
and write an asd file that can be used by asdf
to compile the system specified by the graph.
The entry point for this file should be the write-asd-file function.
The generated asd file will have one asdf module
to load all the files/systems in the build-requires slot
of the global build-module,
and another module -- which depends on the first module --
for all the other files/systems.

The conversion to ASDF is lossy and the Makefile target
should be preferred for development purposes,
but the ASDF target should be good enough for deployment purposes
when providing backwards compatibility with ASDF projects.


asdf-converter.lisp
-------------------

This file contains the code to take an asdf system
and write a BUILD.lisp file for it
and add module forms to the top of all the source files in the system,
so that xcvb can now be used to compile the system.

The entry point to this file is the function ASDF-TO-XCVB.
It take as a parameter one SYSTEM or a list of several SYSTEMS
to merge and convert together so they may be built with XCVB.
The converter will first use ASDF-DEPENDENCY-GROVEL
to compute the actual dependencies within your system(s),
thus generating a list of components;
then it will then process that list of components
and create or update a BUILD.lisp and update all source files
to insert a module statement,
keeping any manual rules from a previously added module statement
but otherwise overriding the main data.


Good places to extend xcvb
==========================

(1) The generic function create-dependency-node-from-type allows you
to specify a keyword that can be put in a dependency list in a module form.
The create-dependency-node-from-type method
with an eql specifier on that keyword
should create the appropriate dependency-graph-node.

(2) The defextension macro allows you to define a function that can be
called via a keyword in the appropriate place in a module declaration.


Notes
=====

(1) A fullname is used as a unique name
to specify a component in the system.
Both modules and nodes have fullnames --
usually a node will have the same fullname as the module it was generated from
modulo a different file extension.

(2) For issues and TODO items, see TODO.rest
