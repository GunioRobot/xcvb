# See INSTALL for instructions. -*- Makefile -*-

PREFIX ?= /usr/local
LISP ?= sbcl
INSTALL_BIN ?= ${PREFIX}/bin
INSTALL_LISP ?= ${PREFIX}/share/common-lisp
INSTALL_IMAGE ?= ${PREFIX}/lib/common-lisp/images
LISP_SOURCE ?= ${INSTALL_LISP}/source
LISP_SYSTEMS ?= ${INSTALL_LISP}/systems

ifeq (${LISP},sbcl)
  XSH=$(shell echo SBCL_HOME="$$(sbcl --noinform --no-userinit --no-sysinit --eval '(progn(princ(sb-ext:posix-getenv "SBCL_HOME"))(quit))')")
else
  XSH=
endif

export RELEASE_DIR ?= $(shell pwd)
export XCVB_DIR := ${RELEASE_DIR}/xcvb
export XCVB_OBJECT_DIRECTORY ?= ${RELEASE_DIR}/build/obj
export CL_SOURCE_REGISTRY:=${XCVB_DIR}//:${RELEASE_DIR}/dependencies//:${LISP_SOURCE}//
export PATH:=${INSTALL_BIN}:${PATH}

OPTIONS := PREFIX=${PREFIX} LISP=${LISP} \
		INSTALL_BIN=${INSTALL_BIN} INSTALL_LISP=${INSTALL_LISP} \
		INSTALL_IMAGE=${INSTALL_IMAGE} \
		LISP_SOURCE=${LISP_SOURCE} LISP_SYSTEMS=${LISP_SYSTEMS} \
		XCVB_OBJECT_DIRECTORY=${XCVB_OBJECT_DIRECTORY} \
		RELEASE_DIR=${RELEASE_DIR} XCVB_DIR=${XCVB_DIR}


### The dependencies, in case you want them.

# Dependencies that already include XCVB support upstream.
# They all use GIT (yay) and their "master" branch includes XCVB support.
# Exception: libfixposix is actually a C library used by iolib,
# that the farmer depends on. It doesn't support XCVB directly,
# but it's no Lisp code, so that's OK.
DEPENDENCIES_SUPPORTING_XCVB := \
	GIT git://common-lisp.net/projects/asdf/asdf.git ; \
	GIT git://common-lisp.net/projects/xcvb/asdf-dependency-grovel.git ; \
	GIT git://common-lisp.net/projects/xcvb/cl-launch.git ; \
	GIT git://common-lisp.net/projects/qitab/command-line-arguments.git ; \
	GIT git://common-lisp.net/users/frideau/fare-utils.git ; \
	GIT git://common-lisp.net/users/frideau/fare-matcher.git ; \
	GIT git://common-lisp.net/users/frideau/fare-mop.git ; \
	GIT git://gitorious.org/libfixposix/libfixposix.git ; \
	GIT git://common-lisp.net/projects/qitab/poiu.git ; \
	GIT git://common-lisp.net/projects/xcvb/quux-iolib.git

# Dependencies patched to run with XCVB
# Their XCVB repo is under git://common-lisp.net/projects/xcvb/FOO
# The repo listed below is the actual unpatched upstream.
# In the XCVB repo, the "master" branch is pristine upstream,
# and the "xcvb" branch has our patches.
DEPENDENCIES_PATCHED_FOR_XCVB := \
	XGIT git://common-lisp.net/projects/alexandria/alexandria.git ; \
	XGIT git://common-lisp.net/projects/cffi/cffi.git ; \
	XGIT git://github.com/froydnj/binascii.git ; \
	XGIT git://github.com/froydnj/ironclad.git ; \
	XDARCS http://common-lisp.net/project/babel/darcs/babel ; \
	XDARCS http://common-lisp.net/project/closer/repos/closer-mop ; \
	XDARCS http://common-lisp.net/project/editor-hints/darcs/named-readtables ; \
	XDARCS http://common-lisp.net/~loliveira/darcs/trivial-garbage/ ; \
	XDARCS http://common-lisp.net/~loliveira/darcs/trivial-features ; \
	: These are used by the farmer only: ; \
	XGIT git://common-lisp.net/projects/bordeaux-threads/bordeaux-threads.git ; \
	XGIT git://gitorious.org/iolib/iolib.git ; \
	: This one is not actually used yet: ; \
	XCVS rucksack :pserver:anonymous:anonymous@common-lisp.net:/project/rucksack/cvsroot

DEPENDENCIES := \
	${DEPENDENCIES_SUPPORTING_XCVB} ; \
	${DEPENDENCIES_PATCHED_FOR_XCVB}

# These are NOT dependencies of XCVB, but have been patched to compile with XCVB.
NON_DEPENDENCIES_PATCHED_FOR_XCVB := \
	list not available yet


install-cl-launch:
	mkdir -p ${LISP_SOURCE}/cl-launch ${INSTALL_BIN}
	./dependencies/cl-launch/cl-launch.sh \
		-l ${LISP} \
		-I ${LISP_SOURCE}/cl-launch \
		-B install_path
	./dependencies/cl-launch/cl-launch.sh \
		-l ${LISP} \
		+I \
		-o ${INSTALL_BIN}/cl-launch \
		-B install_bin

install: install-cl-launch
	mkdir -p ${INSTALL_BIN}
	${MAKE} ${XSH} -f xcvb.mk.${LISP} ${OPTIONS}
	${MAKE} -C xcvb xcvb-bootstrapped-install ${OPTIONS}

install-source: install-cl-launch
	set -e ; \
	mkdir -p ${LISP_SOURCE}/xcvb ${LISP_SYSTEMS} ; \
	GIT () { x=$$(basename $$1 .git) ; \
	  rsync -aC --exclude _darcs --exclude .git dependencies/$$x ${LISP_SOURCE}/ ; } ; \
	XGIT () { x=$$(basename $$1 .git) ; \
	  rsync -aC --exclude _darcs --exclude .git dependencies/$$x ${LISP_SOURCE}/ ; } ; \
	XCVS () { XGIT "$$1" ; } ; \
	XDARCS () { XGIT "$$1" ; } ; \
	${DEPENDENCIES} ; \
	cd xcvb && cp -a *.asd *.lisp *.xcvb ${LISP_SOURCE}/xcvb/
	ln -sf $$(find ${LISP_SOURCE}/ \( -name '*test*' -prune -false \) -o \
			 -type f -name '*.asd' ! -name '*test*' ) ${LISP_SYSTEMS}/

install-using-asdf: install-source
	${MAKE} -C xcvb xcvb-using-asdf ${OPTIONS}

checkout:
	GIT () { url=$$1 ; x=$$(basename $$url .git) ; \
	  if [ -d $$x ] ; then echo "Already got $$x" ; \
	  else git clone $$url ; fi } ; \
	XGIT () { x=$$(basename $$1 .git) ; \
	  url=git://common-lisp.net/projects/xcvb/$$x.git ; \
	  if [ -d $$x ] ; then echo "Already got $$x" ; \
	  else git clone $$url ; git checkout xcvb ; fi } ; \
	XDARCS () { XGIT "$$1" ; } ; \
	XCVS () { XGIT "$$1" ; } ; \
	set -e ; \
	GIT git://common-lisp.net/projects/xcvb/xcvb.git ; \
	mkdir -p dependencies ; cd dependencies ; \
	${DEPENDENCIES}

fake-release-directory:
	[ -n "${RELEASE_DIR}" ] || { echo "RELEASE_DIR not defined" ; exit 42 ;} ; \
	mkdir -p "${RELEASE_DIR}" ; \
	[ -n "${RELEASE_EXCLUDE}" ] || { echo "RELEASE_EXCLUDE not defined" ; exit 42 ;} ; \
	set -e ; \
	mkdir -p ${RELEASE_DIR}/dependencies ${RELEASE_DIR}/xcvb ; \
	{ rm -rf "${RELEASE_DIR}/build/" ; \: ;} ; \
	rsync -av ${RELEASE_EXCLUDE} ./ ${RELEASE_DIR}/xcvb/ ; \
	R () { rsync -av ${RELEASE_EXCLUDE} ../$$1/ ${RELEASE_DIR}/dependencies/$$1/ ; } ; \
	GIT () { R $$(basename $$1 .git) ;} ; \
	XGIT () { GIT $$1 ;} ; XDARCS () { GIT $$1 ;} ; XCVS () { GIT $$1 ;} ; \
	${DEPENDENCIES} ; \
	${MAKE} -C ${RELEASE_DIR} -f xcvb/doc/Makefile.release prepare-release

gc:
	echo -n "Packing xcvb..." ; cd xcvb ; git gc ; git repack -Ad
	cd dependencies ; for i in * ; do \
	  (echo -n "Packing $$i..." ; cd $$i ; git gc ; git repack -Ad) ; done

update:
	set -e ; echo -n "Updating xcvb..." ; cd xcvb ; git pull -a ; \
	GIT () { (x=$$(basename $$1 .git) ; echo -n "Updating $$x... " ; \
		cd dependencies/$$x ; git pull origin master:master); } ; \
	XGIT () { x=$$(basename $$1 .git) ; echo -n "Updating $$x... " ; \
		cd dependencies/$$i ; git pull origin xcvb:xcvb); } ; \
	XDARCS () { XGIT "$$1" ; } ; XCVS () { XGIT "$$1" ; } ; \
	${DEPENDENCIES}

reset:
	set -e ; echo -n "Resetting xcvb..." ; cd xcvb ; git reset --hard ; \
	GIT () { (x=$$(basename $$1 .git) ; echo -n "Resetting $$x... " ; \
		cd dependencies/$$i ; git reset --hard ; \
		git checkout master); } ; \
	XGIT () { (x=$$(basename $$1 .git) ; echo -n "Resetting $$x... " ; \
		cd dependencies/$$i ; git reset --hard ; \
		git checkout xcvb); } ; \
	XCVS () { XGIT "$$1" ; } ; XDARCS () { XGIT "$$1" ; } ; \
	${DEPENDENCIES}

prepare-release:
	(read ; read ; cat ) < xcvb/doc/INSTALL.release > INSTALL && \
	cp -fax xcvb/doc/configure.mk.example xcvb/configure.mk && \
	cp -fax xcvb/doc/Makefile.release Makefile && \
	./dependencies/cl-launch/cl-launch.sh \
		-I ./dependencies/cl-launch \
		-B install_path && \
	echo CL_SOURCE_REGISTRY=$$CL_SOURCE_REGISTRY && \
	xcvb show-source-registry ; \
	for l in sbcl clisp ccl ; do \
	    xcvb make-makefile \
		--build /xcvb \
		--lisp-implementation $$l \
		--output-path=${RELEASE_DIR}/xcvb.mk.$$l \
		--no-master \
		--object-directory build/obj \
		--disable-cfasl ; done && \
	rm -rf build obj xcvb/obj

test: install
	cd ${XCVB_DIR} && \
	./test/runme.zsh ${OPTIONS} validate_release_dir_all_lisps

.PHONY: install-cl-launch install install-source install-using-asdf \
	checkout update gc prepare-release test
