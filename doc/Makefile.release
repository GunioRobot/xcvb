# See INSTALL for instructions. -*- Makefile -*-

PREFIX ?= /usr/local
LISP ?= sbcl
INSTALL_BIN ?= ${PREFIX}/bin
INSTALL_LISP ?= ${PREFIX}/share/common-lisp
INSTALL_IMAGE ?= ${PREFIX}/lib/common-lisp/images
LISP_SOURCE ?= ${INSTALL_LISP}/source
LISP_SYSTEMS ?= ${INSTALL_LISP}/systems

ifeq (${LISP},sbcl)
  XSH=$(shell echo SBCL_HOME="$$(sbcl --noinform --no-userinit --no-sysinit --eval '(progn(princ(sb-ext:posix-getenv "SBCL_HOME"))(quit))')")
else
  XSH=
endif

export RELEASE_DIR := $(shell pwd)
export XCVB_DIR := ${RELEASE_DIR}/xcvb
export XCVB_OBJECT_DIRECTORY ?= ${RELEASE_DIR}/build/obj
export XCVB_PATH:=${XCVB_DIR}:${RELEASE_DIR}/dependencies:${LISP_SOURCE}
export PATH:=${INSTALL_BIN}:${PATH}

OPTIONS := PREFIX=${PREFIX} LISP=${LISP} \
		INSTALL_BIN=${INSTALL_BIN} INSTALL_LISP=${INSTALL_LISP} \
		INSTALL_IMAGE=${INSTALL_IMAGE} \
		LISP_SOURCE=${LISP_SOURCE} LISP_SYSTEMS=${LISP_SYSTEMS} \
		XCVB_OBJECT_DIRECTORY=${XCVB_OBJECT_DIRECTORY} \
		RELEASE_DIR=${RELEASE_DIR} XCVB_DIR=${XCVB_DIR}

GIT_DEPENDENCIES := asdf asdf-dependency-grovel command-line-arguments fare-utils poiu
DARCS_DEPENDENCIES := closer-mop
DEPENDENCIES := ${GIT_DEPENDENCIES} ${DARCS_DEPENDENCIES}

install-cl-launch:
	mkdir -p ${LISP_SOURCE}/cl-launch ${INSTALL_BIN}
	./dependencies/cl-launch/cl-launch.sh \
		-l ${LISP} \
		-I ${LISP_SOURCE}/cl-launch \
		-B install_path
	./dependencies/cl-launch/cl-launch.sh \
		-l ${LISP} \
		+I \
		-o ${INSTALL_BIN}/cl-launch \
		-B install_bin

install: install-cl-launch
	mkdir -p ${INSTALL_BIN}
	${MAKE} ${XSH} -f xcvb.mk.${LISP} ${OPTIONS}
	${MAKE} -C xcvb xcvb-bootstrapped-install ${OPTIONS}

install-source: install-cl-launch
	mkdir -p ${LISP_SOURCE}/xcvb ${LISP_SYSTEMS}
	for dir in ${DEPENDENCIES} ; do \
	  rsync -aC --exclude _darcs dependencies/$$dir ${LISP_SOURCE}/ ; \
	done
	cd xcvb && cp -a *.asd *.lisp *.xcvb ${LISP_SOURCE}/xcvb/
	ln -sf $$(find ${LISP_SOURCE}/ \( -name '*test*' -prune -false \) -o \
			 -type f -name '*.asd' ! -name '*test*' ) ${LISP_SYSTEMS}/

install-using-asdf: install-source
	${MAKE} -C xcvb xcvb-using-asdf ${OPTIONS}

checkout:
	( git clone http://common-lisp.net/project/xcvb/git/xcvb.git || \
	  echo "Already got xcvb.git" ) && \
	mkdir -p dependencies && cd dependencies && \
	( git clone http://common-lisp.net/project/asdf/asdf.git || \
	  echo "Already got asdf.git" ) && \
	( git clone http://common-lisp.net/project/xcvb/git/asdf-dependency-grovel.git || \
	  echo "Already got asdf-dependency-grovel.git" ) && \
	( git clone http://common-lisp.net/project/xcvb/git/cl-launch.git || \
	  echo "Already got cl-launch.git" ) && \
	( git clone http://common-lisp.net/project/qitab/git/command-line-arguments.git || \
	  echo "Already got command-line-arguments.git" ) && \
	( git clone http://common-lisp.net/~frideau/git/fare-utils.git || \
	  echo "Already got poiu.git" ) && \
	( git clone http://common-lisp.net/project/qitab/git/poiu.git || \
	  echo "Already got poiu.git" ) && \
	( if [ -d closer-mop ] ; then echo "Already got closer-mop from darcs" ; else \
	  darcs get http://www.common-lisp.net/project/xcvb/darcs/closer-mop ; fi )

gc:
	echo -n "Packing xcvb..." ; cd xcvb ; git gc
	for i in ${GIT_DEPENDENCIES} ; do \
	  (echo -n "Packing $$i..." ; cd dependencies/$$i ; git gc) ; done

update:
	echo -n "Updating xcvb..." ; cd xcvb ; git pull -a
	for i in ${GIT_DEPENDENCIES} ; do \
	  (echo -n "Updating $$i... " ; cd dependencies/$$i ; git pull origin master:master) ; \
	done
	(echo -n "Updating dependencies/closer-mop... " ; cd dependencies/closer-mop ; \
	darcs pull -a )

reset:
	echo -n "Resetting xcvb..." ; cd xcvb ; git reset --hard
	for i in ${GIT_DEPENDENCIES} ; do \
	  (echo -n "Resetting $$i... " ; cd dependencies/$$i ; git reset --hard) ; \
	done
	(echo -n "Updating dependencies/closer-mop... " ; cd dependencies/closer-mop ; \
	darcs revert -a )

prepare-release:
	(read ; read ; cat ) < xcvb/doc/INSTALL.release > INSTALL && \
	cp -flax xcvb/doc/configure.mk.example xcvb/configure.mk && \
	cp -flax xcvb/doc/Makefile.release Makefile && \
	./dependencies/cl-launch/cl-launch.sh \
		-I ./dependencies/cl-launch \
		-B install_path && \
	for l in sbcl clisp ccl ; do \
	    xcvb make-makefile \
		--xcvb-path=${XCVB_PATH} \
		--build /xcvb \
		--setup /xcvb/no-asdf \
		--lisp-implementation $$l \
		--output-path=${RELEASE_DIR}/xcvb.mk.$$l \
		--no-master \
		--object-directory build/obj \
		--disable-cfasl ; done && \
	rm -rf build obj xcvb/obj

test: install
	cd ${XCVB_DIR} && \
	./test/runme.zsh ${OPTIONS} validate_release_dir

.PHONY: install-cl-launch install install-source install-using-asdf \
	checkout update gc prepare-release test
