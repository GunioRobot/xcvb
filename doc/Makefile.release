# See INSTALL for instructions. -*- Makefile -*-

PREFIX ?= /usr/local
LISP ?= sbcl
INSTALL_BIN ?= ${PREFIX}/bin
INSTALL_LISP ?= ${PREFIX}/share/common-lisp
INSTALL_IMAGE ?= ${PREFIX}/lib/common-lisp/images
LISP_SOURCE ?= ${INSTALL_LISP}/source
LISP_SYSTEMS ?= ${INSTALL_LISP}/systems

ifeq (${LISP},sbcl)
  XSH=$(shell echo SBCL_HOME="$$(sbcl --noinform --no-userinit --no-sysinit --eval '(progn(princ(sb-ext:posix-getenv "SBCL_HOME"))(quit))')")
else
  XSH=
endif

export RELEASE_DIR := $(shell pwd)
export XCVB_DIR := ${RELEASE_DIR}/xcvb
export XCVB_OBJECT_DIRECTORY ?= ${RELEASE_DIR}/build/obj
export CL_SOURCE_REGISTRY:=${XCVB_DIR}//:${RELEASE_DIR}/dependencies//:${LISP_SOURCE}//
export PATH:=${INSTALL_BIN}:${PATH}

OPTIONS := PREFIX=${PREFIX} LISP=${LISP} \
		INSTALL_BIN=${INSTALL_BIN} INSTALL_LISP=${INSTALL_LISP} \
		INSTALL_IMAGE=${INSTALL_IMAGE} \
		LISP_SOURCE=${LISP_SOURCE} LISP_SYSTEMS=${LISP_SYSTEMS} \
		XCVB_OBJECT_DIRECTORY=${XCVB_OBJECT_DIRECTORY} \
		RELEASE_DIR=${RELEASE_DIR} XCVB_DIR=${XCVB_DIR}

GIT_DEPENDENCIES := \
	asdf asdf-dependency-grovel binascii cl-launch \
	command-line-arguments fare-utils poiu \
	alexandria cffi iolib quux-iolib \
	ironclad binascii

DARCS_DEPENDENCIES := closer-mop bordeaux-threads \
	trivial-garbage trivial-features

DEPENDENCIES := ${GIT_DEPENDENCIES} ${DARCS_DEPENDENCIES}


install-cl-launch:
	mkdir -p ${LISP_SOURCE}/cl-launch ${INSTALL_BIN}
	./dependencies/cl-launch/cl-launch.sh \
		-l ${LISP} \
		-I ${LISP_SOURCE}/cl-launch \
		-B install_path
	./dependencies/cl-launch/cl-launch.sh \
		-l ${LISP} \
		+I \
		-o ${INSTALL_BIN}/cl-launch \
		-B install_bin

install: install-cl-launch
	mkdir -p ${INSTALL_BIN}
	${MAKE} ${XSH} -f xcvb.mk.${LISP} ${OPTIONS}
	${MAKE} -C xcvb xcvb-bootstrapped-install ${OPTIONS}

install-source: install-cl-launch
	mkdir -p ${LISP_SOURCE}/xcvb ${LISP_SYSTEMS}
	for dir in ${DEPENDENCIES} ; do \
	  rsync -aC --exclude _darcs dependencies/$$dir ${LISP_SOURCE}/ ; \
	done
	cd xcvb && cp -a *.asd *.lisp *.xcvb ${LISP_SOURCE}/xcvb/
	ln -sf $$(find ${LISP_SOURCE}/ \( -name '*test*' -prune -false \) -o \
			 -type f -name '*.asd' ! -name '*test*' ) ${LISP_SYSTEMS}/

install-using-asdf: install-source
	${MAKE} -C xcvb xcvb-using-asdf ${OPTIONS}

checkout:
	clone () { x=$($basename $$1 .git) ; \
	  if [ -d $$x ] ; then echo "Already got $x" ; \
	  else git clone $$1 ; fi } ; \
	get () { x=$($basename $$1) ; \
	  if [ -d $$x ] ; then echo "Already got $x" ; \
	  else darcs get $$1 ; fi ; } ; \
	clone git://common-lisp.net/projects/xcvb/xcvb.git && \
	mkdir -p dependencies && cd dependencies && \
	clone git://common-lisp.net/projects/xcvb/alexandria.git && \
	clone git://common-lisp.net/projects/asdf/asdf.git && \
	clone git://common-lisp.net/projects/xcvb/asdf-dependency-grovel.git && \
	clone git://github.com/froydnj/binascii.git && \
	clone git://common-lisp.net/projects/xcvb/cffi.git && \
	clone git://common-lisp.net/projects/xcvb/cl-launch.git && \
	clone git://common-lisp.net/projects/qitab/command-line-arguments.git && \
	clone git://common-lisp.net/users/frideau/fare-utils.git && \
	clone git://common-lisp.net/projects/xcvb/iolib.git && \
	clone git://github.com/froydnj/ironclad.git && \
	clone git://common-lisp.net/projects/qitab/poiu.git && \
	clone git://common-lisp.net/projects/xcvb/quux-iolib.git && \
	get http://common-lisp.net/project/xcvb/darcs/closer-mop && \
	get http://common-lisp.net/project/xcvb/darcs/trivial-features && \
	get http://common-lisp.net/project/xcvb/darcs/trivial-garbage

fake-release-directory:
	[ -d "${RELEASE_DIR}" ] || { echo "RELEASE_DIR not defined" ; exit 42 ;} ; \
	[ -n "${RELEASE_EXCLUDE}" ] || { echo "RELEASE_EXCLUDE not defined" ; exit 42 ;} ; \
	mkdir -p ${RELEASE_DIR}/dependencies ${RELEASE_DIR}/xcvb && \
	{ rm -rf "${RELEASE_DIR}/build/" ; \: ;} && \
	rsync -av ${RELEASE_EXCLUDE} ./ ${RELEASE_DIR}/xcvb/ && \
	for i in ${DEPENDENCIES} ; do \
	  rsync -av ${RELEASE_EXCLUDE} ../$$i ${RELEASE_DIR}/dependencies/ ; \
	done ; \
		prepare-release


gc:
	echo -n "Packing xcvb..." ; cd xcvb ; git gc ; git repack -Ad
	for i in ${GIT_DEPENDENCIES} ; do \
	  (echo -n "Packing $$i..." ; cd dependencies/$$i ; git gc ; git repack -Ad) ; done

update:
	echo -n "Updating xcvb..." ; cd xcvb ; git pull -a
	for i in ${GIT_DEPENDENCIES} ; do \
	  (echo -n "Updating $$i... " ; cd dependencies/$$i ; git pull origin master:master) ; \
	done
	(echo -n "Updating dependencies/closer-mop... " ; cd dependencies/closer-mop ; \
	darcs pull -a )

reset:
	echo -n "Resetting xcvb..." ; cd xcvb ; git reset --hard
	for i in ${GIT_DEPENDENCIES} ; do \
	  (echo -n "Resetting $$i... " ; cd dependencies/$$i ; git reset --hard) ; \
	done
	(echo -n "Updating dependencies/closer-mop... " ; cd dependencies/closer-mop ; \
	darcs revert -a )

prepare-release:
	(read ; read ; cat ) < xcvb/doc/INSTALL.release > INSTALL && \
	cp -fax xcvb/doc/configure.mk.example xcvb/configure.mk && \
	cp -fax xcvb/doc/Makefile.release Makefile && \
	./dependencies/cl-launch/cl-launch.sh \
		-I ./dependencies/cl-launch \
		-B install_path && \
	xcvb show-source-registry \
		--source-registry ${RELEASE_DIR}// ; \
	for l in sbcl clisp ccl ; do \
	    xcvb make-makefile \
		--source-registry ${RELEASE_DIR}// \
		--build /xcvb \
		--lisp-implementation $$l \
		--output-path=${RELEASE_DIR}/xcvb.mk.$$l \
		--no-master \
		--object-directory build/obj \
		--disable-cfasl ; done && \
	rm -rf build obj xcvb/obj

test: install
	cd ${XCVB_DIR} && \
	./test/runme.zsh ${OPTIONS} validate_release_dir_all_lisps

.PHONY: install-cl-launch install install-source install-using-asdf \
	checkout update gc prepare-release test
